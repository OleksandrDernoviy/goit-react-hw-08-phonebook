{"version":3,"file":"static/js/900.5526403b.chunk.js","mappings":"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","sources":["../node_modules/nanoid/index.browser.js","store/contacts/contactsSelectors.js","webpack://react-homework-template/./src/components/ContactForm/contactForm.module.css?2173","components/ContactForm/ContactForm.jsx","webpack://react-homework-template/./src/components/Filter/filter.module.css?e01c","components/Filter/Filter.jsx","webpack://react-homework-template/./src/components/ContactList/contactList.module.css?ddc0","components/ContactList/ContactList.jsx","webpack://react-homework-template/./src/pages/ContactsPage/contactsPage.module.css?6e18","pages/ContactsPage/ContactsPage.jsx"],"sourcesContent":["import { urlAlphabet } from './url-alphabet/index.js'\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nlet nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n  while (size--) {\n    let byte = bytes[size] & 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte < 63) {\n      id += '_'\n    } else {\n      id += '-'\n    }\n  }\n  return id\n}\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n","import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectContacts = state => state.contacts.contacts;\nexport const selectFilter = state => state.filter\nexport const selectIsLoading = state => state.contacts.isLoading;\n\nexport const selectError = state => state.contacts.error;\n\n\nexport const selectFilterContacts = createSelector(\n  [selectContacts, selectFilter],\n  (contacts, filter) => {\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filter.toLowerCase().trim())\n    );\n  }\n);\n","// extracted by mini-css-extract-plugin\nexport default {\"phoneBookForm\":\"contactForm_phoneBookForm__Asj8X\",\"phoneBookFormBtn\":\"contactForm_phoneBookFormBtn__s5Uh1\",\"phoneBookInput\":\"contactForm_phoneBookInput__ej6w3\"};","import React, { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { nanoid } from 'nanoid';\nimport { addContacts } from '../../store/contacts/contactsOperations';\nimport { selectContacts } from '../../store/contacts/contactsSelectors';\nimport css from './contactForm.module.css';\n\n  const ContactForm = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n  const [name, setName] = useState('');\n  const [number, setPhone] = useState('');\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    handleAddContact({ name, number });\n    setName('');\n    setPhone('');\n  };\n\n  const handleAddContact = ({ name, number }) => {\n    const sameName = contacts.find(\n      el => el.name.toLowerCase() === name.toLowerCase()\n    );\n    if (sameName) {\n      alert(`${sameName.name} is already in contacts.`);\n      return;\n    }\n    dispatch(addContacts({ id: nanoid(), name, number }));\n  };\n\n  const handleChange = e => {\n    switch (e.currentTarget.name) {\n      case 'name':\n        setName(e.currentTarget.value);\n        break;\n      case 'number':\n        setPhone(e.currentTarget.value);\n        break;\n      default:\n        return;\n    }\n  };\n\n  return (\n    <form className={css.phoneBookForm} onSubmit={handleSubmit}>\n      <label htmlFor=\"checkName\">Name</label>\n      <input\n        className={css.phoneBookInput}\n        id=\"checkName\"\n        type=\"text\"\n        name=\"name\"\n        required\n        value={name}\n        onChange={handleChange}\n      />\n      <label htmlFor=\"phoneNumber\">Number</label>\n      <input\n        className={css.phoneBookInput}\n        id=\"phoneNumber\"\n        type=\"tel\"\n        pattern=\"[0-9]*\"\n        name=\"number\"\n        required\n        value={number}\n        onChange={handleChange}\n      />\n      <button className={css.phoneBookFormBtn} type=\"submit\">\n        Add Contact\n      </button>\n    </form>\n  );\n};\n\nexport default ContactForm;\n","// extracted by mini-css-extract-plugin\nexport default {\"filterLabel\":\"filter_filterLabel__jh4CL\",\"filterInput\":\"filter_filterInput__2T6yn\"};","import React from 'react';\nimport { useDispatch } from 'react-redux';\n// import { selectFilter } from 'store/selectors';\nimport css from './filter.module.css';\nimport '../../index.css';\nimport { actionFilter } from 'store/contacts/filterSlice';\n\nconst Filter = () => {\n  const dispatch = useDispatch();\n  return (\n    <>\n      <label className={css.filterLabel} htmlFor=\"search\">\n        Find contacts by name\n      </label>\n      <input\n        className={css.filterInput}\n        id=\"search\"\n        type=\"text\"\n        name=\"filter\"\n        onChange={e => dispatch(actionFilter(e.currentTarget.value))}\n      />\n    </>\n  );\n};\n\nexport default Filter;\n","// extracted by mini-css-extract-plugin\nexport default {\"contactList\":\"contactList_contactList__rfM1N\",\"contactListItem\":\"contactList_contactListItem__T4ojX\",\"contactDelBtn\":\"contactList_contactDelBtn__8dHcC\",\"contactItemView\":\"contactList_contactItemView__ZCO5i\"};","import { useSelector, useDispatch } from 'react-redux';\nimport { deleteContact } from '../../store/contacts/contactsOperations';\nimport { useEffect } from 'react';\nimport { fetchContacts } from '../../store/contacts/contactsOperations';\nimport {\n  selectIsLoading,\n  selectError,\n  selectFilterContacts,\n} from '../../store/contacts/contactsSelectors';\nimport css from './contactList.module.css';\nimport '../../index.css';\n\nconst ContactList = () => {\n  const dispatch = useDispatch();\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n  const filterContacts = useSelector(selectFilterContacts);\n\n  return (\n    <>\n      {isLoading && <p>Loading tasks...</p>}\n      {error && <p>{error}</p>}\n      {filterContacts.length > 0 && (\n        <ul className={css.contactList}>\n          {filterContacts.map(({ id, name, number }) => (\n            <li className={css.contactListItem} key={id}>\n              <p className={css.contactItemView}>\n                {name}: {formatNumber(number)}\n              </p>\n              <button\n                className={css.contactDelBtn}\n                type=\"button\"\n                name=\"delete\"\n                onClick={() => dispatch(deleteContact(id))}\n              >\n                Delete\n              </button>\n            </li>\n          ))}\n        </ul>\n      )}\n    </>\n  );\n};\nconst formatNumber = number => {\n  return number.replace(/(\\d{3})(\\d{2})(\\d{2})/, '$1-$2-$3');\n};\nexport default ContactList;\n","// extracted by mini-css-extract-plugin\nexport default {\"phonebookBox\":\"contactsPage_phonebookBox__IIogT\",\"phonebookTitle\":\"contactsPage_phonebookTitle__MMdNM\",\"contactsTitle\":\"contactsPage_contactsTitle__e3GjE\"};","import ContactForm  from 'components/ContactForm/ContactForm'\nimport Filter from 'components/Filter/Filter';\nimport ContactList from 'components/ContactList/ContactList';\nimport css from './contactsPage.module.css'\n\nimport React from 'react'\n\nconst ContactsPage = () => {\n  return (\n    <div className={css.phonebookBox}>\n      <h1 className={css.phonebookTitle}>Phonebook</h1>\n      <h2 className={css.contactsTitle}>Contacts</h2>    \n      <ContactForm />\n      <Filter />\n      <ContactList />\n    </div>\n  );\n}\n\nexport default ContactsPage"],"names":["nanoid","size","arguments","length","undefined","id","bytes","crypto","getRandomValues","Uint8Array","byte","toString","toUpperCase","selectContacts","state","contacts","selectIsLoading","isLoading","selectError","error","selectFilterContacts","createSelector","filter","contact","name","toLowerCase","includes","trim","dispatch","useDispatch","useSelector","_useState","useState","_useState2","_slicedToArray","setName","_useState3","_useState4","number","setPhone","handleAddContact","_ref","sameName","find","el","alert","concat","addContacts","handleChange","e","currentTarget","value","_jsxs","className","css","onSubmit","preventDefault","children","_jsx","htmlFor","type","required","onChange","pattern","_Fragment","actionFilter","formatNumber","replace","useEffect","fetchContacts","filterContacts","map","onClick","deleteContact","ContactForm","Filter","ContactList"],"sourceRoot":""}